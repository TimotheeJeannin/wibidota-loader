/**
 * (c) Copyright 2012 WibiData, Inc.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@namespace("com.wibidata.wibidota.dotaloader")
/**
 * Avro schemas for sorting stats about dota 2 games.
 */
protocol DotaStats {

  // GameMode and LobbyType correspond to enums used in the dota_matches table
  enum GameMode {
    UNKNOWN_ZERO, ALL_PICK, CAPTAINS_MODE, RANDOM_DRAFT, SINGLE_DRAFT, ALL_RANDOM,
    UNKOWN_SIX, THE_DIRETIDE, REVERSE_CAPTAINS_MODE, GREEVILING,
    TUTORIAL, MID_ONLY, LEAST_PLAYED, NEW_PLAYER_POOL
  }

  enum LobbyType {
    INVALID, PUBLIC_MATCHMAKING, PRACTICE, TOURNAMENT, 
    TUTORIAL, CO_OP_WITH_BOTS, TEAM_MATCH
  }
  
  enum LeaverStatus {
    STAYED, SAFE_ABANDON, ABANDON, BOT
  }

  // Records when a player leveled up an ability.
  record AbilityUpgrade {
    int level;
    int ability_id;
    int time;
  }

  record AdditionalUnit {
    string name;
    array<int> item_ids;
  }

  // Stats for a specific player in the game.
  record Player {
    int gold_spent;
    int gold;
    int deaths;
    int hero_damage;
    int last_hits;
    int player_slot;
    int denies;
    array<AbilityUpgrade> ability_upgrades;
    int tower_damage;
    int hero_id;
    double exp_per_minute;
    long account_id;
    int kills;
//    LeaverStatus leaver_status;
    int leaverStatus;
    int hero_healing;
    int assists;
    double gold_per_minute;
    int level;
    array<int> item_ids;
    union {null, AdditionalUnit} additional_units;
  }

  // Array of all the per-player stats in the game.
  record Players {
    array<Player> players;
  }
}
